{"expireTime":9007200871023418000,"key":"transformer-remark-markdown-html-2795ac4981296a705868acb66c3058fb--","val":"<h1>JAM Stack</h1>\n<h3>Resources</h3>\n<ul>\n<li><a href=\"https://jamstack.org/examples/\">https://jamstack.org/examples/</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=J-M11cC_NL4\">https://www.youtube.com/watch?v=J-M11cC_NL4</a></li>\n<li>\n<h2><a href=\"https://jamstack.wtf/\">https://jamstack.wtf/</a></h2>\n</li>\n</ul>\n<h3>Notes</h3>\n<ul>\n<li>Javascript, APIs, Markdown</li>\n<li>Basically just serving the same content over and over again from a CDN like an s3. Basically just statically generated sites on CDNs.</li>\n<li>\n<p>to convert can use:</p>\n<ul>\n<li>micro frontends: leaving small spaces on your website for only the parts that need to change based on API requests and then changing everything else.</li>\n<li>edge side includes: a server inbetween the s3 and the customer that will inject some new content before it reaches the customer. </li>\n</ul>\n</li>\n<li>Very secure since there isn't a web server to hack. </li>\n<li>Mostly only for websites that are pretty much just static but with maybe a few variable changes (like a price, etc). </li>\n<li>Instead of dynamically rendering the webpages, you are literally pre rendering them, sticking them on a CDN and then occasionally injecting some new logic into them. </li>\n<li>This is actually just what gastby does. It statically builds the site already. * Don't use JAM stack if your site requires tight coupling between client and server. I.e., A site built with a server side CMS, any monolithic server-run web app that relies on Ruby, Node, or another backend. </li>\n<li>Typical workflow: Develop -> git push -> automatic build -> static assets -> atomic deploy -> pre-render and invalidate cache -> push to CDN </li>\n</ul>"}