{"expireTime":9007200871020005000,"key":"transformer-remark-markdown-html-0368f82493e17b02758bace37f8b5b2e--","val":"<h1>The Paint API</h1>\n<p>references: <a href=\"https://www.sitepen.com/blog/programmatically-create-images-with-the-css-paint-api/\">https://www.sitepen.com/blog/programmatically-create-images-with-the-css-paint-api/</a></p>\n<h3>Notes</h3>\n<ul>\n<li>The CSS Paint API is a modern web platform feature to programmatically create images in JS which are rendered to the page when referenced by CSS. You create images using the Canvas API. </li>\n<li>You can use the paint image anywhere you would expect a CSS image.</li>\n<li>Instead of downloading some image somewhere from the internet, CSS extracts the image from JS itself.</li>\n<li>You define the image in JS (called a paint worklet). However it has some constraints: no network access, no storage access, no script lifetime guarantee, no timer functions like setInterval. </li>\n<li>They are independent of the main JS thread and work a lot like Web Workers.</li>\n<li>\n<p>This paint class you define in the worklet gets passed a canvas object, paint size, and input props.\t</p>\n<ul>\n<li>It can be passed custom properties from the CSS selector.</li>\n<li>this is great bc it means you can essentially create an image that can be reused and restyled via css properties throughout your application.</li>\n</ul>\n</li>\n<li>Animate images by repainting them by changing the custom attributes somewhere. </li>\n</ul>"}