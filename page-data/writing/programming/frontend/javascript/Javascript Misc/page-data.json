{"componentChunkName":"component---src-components-markdown-jsx","path":"/writing/programming/frontend/javascript/Javascript Misc","result":{"data":{"markdownRemark":{"html":"<h1>JavaScript Misc</h1>\n<ul>\n<li>general js notes, can be about anything*</li>\n</ul>\n<h3>Resources</h3>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API/Using_the_Web_Animations_API\">https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API/Using_the_Web_Animations_API</a></li>\n<li>\n<h2><a href=\"https://css-tricks.com/css-animations-vs-web-animations-api/\">https://css-tricks.com/css-animations-vs-web-animations-api/</a></h2>\n</li>\n</ul>\n<h3>Web Animations API</h3>\n<ul>\n<li>One of the most performant ways to write animations.</li>\n<li>Breaks up animating into two parts: the timing object, and the actual transformations to go through. </li>\n<li>Easy access by 'animate': `document.getElementById(\"alice\").animate(transforms, timing);</li>\n<li>Can also get all animations with document.getAnimations()</li>\n<li>Also provide events that can be handled and listened for. </li>\n</ul>\n<h3>Canvas API</h3>\n<ul>\n<li>Provides a means for drawing graphics in JS and HTML. Largely focuses on 2D graphics. </li>\n<li>WebGL mainly used for 3D graphics.</li>\n</ul>\n<h3>The 'New' Function</h3>\n<ul>\n<li>\n<p>You can create a function with the 'new Function' method by passing in a list of args and the function body.</p>\n<ul>\n<li>ex: let add = new Function('a', 'b', 'return a + b');</li>\n<li>sum (1 ,2) => 3</li>\n</ul>\n</li>\n</ul>\n<h3>Generators</h3>\n<ul>\n<li>\n<p>Use special syntax: <code>function*</code>. Ex:</p>\n<pre><code class=\"language-function*\" data-meta=\"gen() {\">  yield 1;\n  yelid 2;\n}```\n</code></pre>\n</li>\n<li>Returns a special object called a generator object when called, doesn't return a value.</li>\n<li>Call <code>next()</code> on the returned object to yield the next value.</li>\n<li>Generators are iterable so you can spread them into a list to get all possible return values.</li>\n<li>Can embed one generator in another so something like <code>yield* otherGenerator()</code> would return all the values from other generator before proceeding.</li>\n<li>Can pass a value back to the generator by passing a value into the 'next' call. This value will be what is returned by the corresponding yield.</li>\n<li>Can also make values asynchronously iterable. You can await the next value from the generator. </li>\n<li>Common practice for <code>Symbol.iterator</code> to return a generator.</li>\n</ul>\n<h3>Modules</h3>\n<ul>\n<li>CommonJS is the m odule system for node.js</li>\n<li>Modules always use 'use strict' by default.</li>\n<li>Imports must have a path, no bare module imports allowed. EX) import x from 'Hi', not allowed but import x from './Hi' is fine.</li>\n<li>Can also use dynamic imports with the await keyword + import(modulePath) which returns a promise.</li>\n</ul>","frontmatter":{"slug":"/writing/programming/frontend/javascript/Javascript Misc","date":"2021-02-01"}}},"pageContext":{"slug":"/writing/programming/frontend/javascript/Javascript Misc"}},"staticQueryHashes":[]}